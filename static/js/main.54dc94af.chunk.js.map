{"version":3,"sources":["utils/index.ts","config.ts","components/Board.tsx","components/Cell.tsx","components/Header.tsx","components/Splash.tsx","components/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["facepaint","map","bp","config","size","rows","cols","spreadAfter","Container","styled","div","Board","counter","gameState","items","onCellClick","onContextClick","useState","stress","setStress","handleMouseDown","useCallback","handleMouseUp","onMouseDown","onMouseUp","item","key","position","onClick","getIcon","isRevealed","isVirus","isUnderQuarantine","isCure","hint","Cell","handleOnClick","handleOnContextClick","e","preventDefault","onContextMenu","src","alt","getMainImage","Header","stressed","images","Splash","step","setStep","handleClick","Footer","href","max","shuffle","range","virusA","virusB","cure","i","getNeighbours","filter","v","App","setCounter","setGameState","useEffect","forEach","processClick","callback","potentialVirus","find","it","reduce","acc","spreadDisease","handleCellClick","handleCellContextClick","Boolean","window","location","hostname","match","globalStyles","css","rootElement","document","getElementById","hasChildNodes","hydrate","render","styles","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4NAMkBA,YADS,CAAC,IAAK,IAAK,KAAM,MACJC,KAAI,SAAAC,GAAE,mCAA0BA,EAA1B,W,MCG/BC,EAPQ,CACrBC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,YAAa,G,gICQf,IAAMC,EAAYC,IAAOC,IAAV,IAEJP,EAAOG,KAAOH,EAAOC,MAqCjBO,EAjCyB,SAAC,GAMlC,IALLC,EAKI,EALJA,QACAC,EAII,EAJJA,UACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,YACAC,EACI,EADJA,eACI,EACwBC,oBAAS,GADjC,mBACGC,EADH,KACWC,EADX,KAEEC,EAAkBC,uBAAY,WAClCF,GAAU,KACT,IACGG,EAAgBD,uBAAY,WAChCF,GAAU,KACT,IAEH,OACE,kBAACX,EAAD,CAAWe,YAAaH,EAAiBI,UAAWF,GAClD,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQV,QAASA,EAASM,OAAQA,EAAQL,UAAWA,IACpDC,EAAMb,KAAI,SAAAwB,GAAI,OACb,kBAAC,EAAD,CACEC,IAAKD,EAAKE,SACVd,UAAWA,EACXY,KAAMA,EACNG,QAASb,EACTC,eAAgBA,OAGpB,kBAAC,EAAD,Q,wOCpCN,IAAMR,EAAYC,IAAOC,IAAV,IACJP,EAAOC,KACND,EAAOC,MAWbyB,EAAU,SAAC,EAEfhB,GACI,IAFFiB,EAEC,EAFDA,WAAYC,EAEX,EAFWA,QAASC,EAEpB,EAFoBA,kBAAmBC,EAEvC,EAFuCA,OAAQC,EAE/C,EAF+CA,KAGlD,OAAKJ,GAA4B,YAAdjB,EAGfmB,EACK,aAELD,EACK,QAELE,EACK,OAGFC,EAZE,aAkCIC,EAnBwB,SAAC,GAAkD,IAAhDtB,EAA+C,EAA/CA,UAAWY,EAAoC,EAApCA,KAAMG,EAA8B,EAA9BA,QAASZ,EAAqB,EAArBA,eAC5DoB,EAAgBf,uBAAY,WAChCO,EAAQH,KACP,CAACA,EAAMG,IACJS,EAAuBhB,uBAC3B,SAAAiB,GACEA,EAAEC,iBACFvB,EAAeS,KAEjB,CAACA,EAAMT,IAGT,OACE,kBAAC,EAAD,CAAWY,QAASQ,EAAeI,cAAeH,GAChD,yBAAKI,IAAG,kBAAaZ,EAAQJ,EAAMZ,GAA3B,QAA6C6B,IAAI,O,wJChD/D,IAAMlC,EAAYC,IAAOC,IAAV,IACJP,EAAOC,KAAOD,EAAOG,KACN,EAAdH,EAAOC,MAKbuC,EAAe,SAAC9B,GACpB,OAAQA,GACN,IAAK,OACL,IAAK,kBACH,MAAO,OACT,IAAK,MACH,MAAO,UACT,QACE,MAAO,eAeE+B,EAX0B,SAAC,GAA2B,IAAzB/B,EAAwB,EAAxBA,UACpCgC,EAD4D,EAAb3B,QACZ,SAAdL,GAAsC,oBAAdA,EAEnD,OACE,kBAAC,EAAD,KACE,yBAAK4B,IAAG,wBAAmBI,EAAW,SAAW,SAAzC,QAAyDH,IAAI,KACrE,yBAAKD,IAAG,kBAAaE,EAAa9B,GAA1B,QAA4C6B,IAAI,O,kOCjC9D,IAAMI,EAAS,CAAC,aAAc,aAExBtC,EAAYC,IAAOC,IAAV,KAyBAqC,EAZA,WAAO,IAAD,EACK9B,mBAAS,GADd,mBACZ+B,EADY,KACNC,EADM,KAEbC,EAAc7B,uBAAY,WAC9B4B,EAAQD,EAAO,KACd,CAACA,IACJ,OAAOF,EAAOE,GACZ,kBAAC,EAAD,KACE,yBAAKP,IAAG,kBAAaK,EAAOE,IAASpB,QAASsB,EAAaR,IAAI,MAE/D,M,yTCxBN,IAAMlC,EAAYC,IAAOC,IAAV,KA2BAyC,EATA,kBACb,kBAAC,EAAD,KACE,uBAAGC,KAAK,kCAAR,eACA,uBAAGA,KAAK,gCAAR,aACA,uBAAGA,KAAK,yCAAR,UACA,uBAAGA,KAAK,KAAR,a,wNClBJ,IAAM5C,EAAYC,IAAOC,IAAV,KASTI,EAAiB,WAAsC,IAArCuC,EAAoC,uDAA9BlD,EAAOE,KAAOF,EAAOG,KAAS,EAC3BgD,kBAAQC,gBAAMF,IADa,mBACnDG,EADmD,KAC3CC,EAD2C,KACnCC,EADmC,KAE1D,OAAOH,gBAAMF,GAAKpD,KAAI,SAAA0D,GAAC,MAAK,CAC1BhC,SAAUgC,EACV5B,QAAS4B,IAAMH,GAAUG,IAAMF,EAC/BxB,OAAQ0B,IAAMD,EACdxB,KAAM,MANa,GAUjB0B,EAAgB,SAACnC,GACrB,IAAKA,EACH,MAAO,GAF+C,IAIhDnB,EAAeH,EAAfG,KAAMD,EAASF,EAATE,KACNsB,EAAaF,EAAbE,SAYR,MAVkB,CAChBA,EAAW,EACXA,EAAW,EACXA,EAAW,EAAIrB,EACfqB,EAAWrB,EACXqB,EAAWrB,EAAO,EAClBqB,EAAWrB,EAAO,EAClBqB,EAAWrB,EACXqB,EAAWrB,EAAO,GAGjBuD,QACC,SAAAC,GAAC,QAEGA,EAAI,GACJA,GAAKxD,EAAOD,GACXsB,EAAWrB,IAAS,GAAKwD,EAAIxD,IAASA,EAAO,GAC7CqB,EAAWrB,IAAS,GAAKwD,EAAIxD,IAAS,MAG5CL,KAAI,SAAA0D,GAAC,OAAI7C,EAAM6C,OAwFLI,EAjEH,WAAO,IAAD,EACc9C,mBAAS,GADvB,mBACTL,EADS,KACAoD,EADA,OAEkB/C,mBAAoB,WAFtC,mBAETJ,EAFS,KAEEoD,EAFF,KAIhBC,qBAAU,WACU,YAAdrD,GAxBNC,EAAMqD,SAAQ,SAAA1C,GACZA,EAAKK,YAAa,OA0BjB,CAACjB,IAEJ,IAAMuD,EAAe/C,uBACnB,SAACI,EAAY4C,GACP5C,EAAKK,aAITuC,IAEAL,EAAWpD,EAAU,GACrBa,EAAKK,YAAa,EAlCF,SAAClB,GACrB,GAAIA,EAAUT,EAAOI,YAAa,CAChC,IAAM+D,EAAiBhB,kBAAQM,EAAcN,kBAAQxC,GAAOyD,MAAK,SAAAC,GAAE,OAAIA,EAAGzC,aAAWwC,MACnF,SAAAC,GAAE,OAAKA,EAAG1C,aAAe0C,EAAGvC,SAAWuC,EAAGzC,WAExCuC,IACFA,EAAevC,SAAU,GAI7BjB,EAAMqD,SAAQ,SAAAK,GACZA,EAAGtC,KAAO0B,EAAcY,GAAIC,QAAO,SAACC,EAAKZ,GAAN,OAAYY,IAAOZ,EAAE/B,UAAS,MAwB/D4C,CAAc/D,MAEhB,CAACA,IAGGgE,EAAkBvD,uBACtB,SAACI,GACC2C,EAAa3C,GAAM,WACbA,EAAKM,SACPkC,EAAa,QAEXxC,EAAKQ,QACPgC,EAAa,YAInB,CAACG,IAGGS,EAAyBxD,uBAC7B,SAACI,GACC2C,EAAa3C,GAAM,WACbA,EAAKM,QACPN,EAAKO,mBAAoB,EAEzBiC,EAAa,wBAInB,CAACG,IAGH,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEvD,UAAWA,EACXD,QAASA,EACTE,MAAOA,EACPC,YAAa6D,EACb5D,eAAgB6D,MC5HJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2D,0KCVnC,IAAMC,EAAeC,YAAH,KASZC,EAAcC,SAASC,eAAe,UAChC,OAAXF,QAAW,IAAXA,OAAA,EAAAA,EAAaG,iBAAkBC,UAAUC,UACxC,oCACE,kBAAC,IAAD,CAAQC,OAAQR,IAChB,kBAAC,EAAD,OAEFE,GD+GI,kBAAmBO,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.54dc94af.chunk.js","sourcesContent":["import facepaint from 'facepaint';\n\nexport { default as styled } from '@emotion/styled';\nexport { css } from '@emotion/core';\n\nexport const breakpoints = [576, 992, 1200, 1300];\nexport const mq = facepaint(breakpoints.map(bp => `@media (min-width: ${bp}px)`));\n","import { Config } from 'types';\n\nconst config: Config = {\n  size: 32,\n  rows: 10,\n  cols: 10,\n  spreadAfter: 5,\n};\n\nexport default config;\n","import { Cell, Footer, Header, Splash } from 'components';\nimport config from 'config';\nimport React, { FunctionComponent, useCallback, useState } from 'react';\nimport { GameState, Item } from 'types';\nimport { styled } from 'utils';\n\ninterface Props {\n  counter: number;\n  onCellClick: (item: Item) => void;\n  onContextClick: (item: Item) => void;\n  items: Item[];\n  gameState: GameState;\n}\n\nconst Container = styled.div`\n  position: relative;\n  width: ${config.cols * config.size}px;\n  font-size: 0;\n`;\n\nconst Board: FunctionComponent<Props> = ({\n  counter,\n  gameState,\n  items,\n  onCellClick,\n  onContextClick,\n}) => {\n  const [stress, setStress] = useState(false);\n  const handleMouseDown = useCallback(() => {\n    setStress(true);\n  }, []);\n  const handleMouseUp = useCallback(() => {\n    setStress(false);\n  }, []);\n\n  return (\n    <Container onMouseDown={handleMouseDown} onMouseUp={handleMouseUp}>\n      <Splash />\n      <Header counter={counter} stress={stress} gameState={gameState} />\n      {items.map(item => (\n        <Cell\n          key={item.position}\n          gameState={gameState}\n          item={item}\n          onClick={onCellClick}\n          onContextClick={onContextClick}\n        />\n      ))}\n      <Footer />\n    </Container>\n  );\n};\n\nexport default Board;\n","import config from 'config';\nimport React, { FunctionComponent, useCallback } from 'react';\nimport { GameState, Item } from 'types';\nimport { styled } from 'utils';\n\ninterface Props {\n  item: Item;\n  onClick: (item: Item) => void;\n  onContextClick: (item: Item) => void;\n  gameState: GameState;\n}\n\nconst Container = styled.div`\n  width: ${config.size}px;\n  height: ${config.size}px;\n  display: inline-block;\n  font-size: 16px;\n  overflow: hidden;\n  cursor: pointer;\n\n  &:hover {\n    opacity: 0.5;\n  }\n`;\n\nconst getIcon = (\n  { isRevealed, isVirus, isUnderQuarantine, isCure, hint }: Item,\n  gameState: GameState,\n) => {\n  if (!isRevealed && gameState === 'ongoing') {\n    return 'untouched';\n  }\n  if (isUnderQuarantine) {\n    return 'quarantine';\n  }\n  if (isVirus) {\n    return 'virus';\n  }\n  if (isCure) {\n    return 'cure';\n  }\n\n  return hint;\n};\n\nconst Cell: FunctionComponent<Props> = ({ gameState, item, onClick, onContextClick }) => {\n  const handleOnClick = useCallback(() => {\n    onClick(item);\n  }, [item, onClick]);\n  const handleOnContextClick = useCallback(\n    e => {\n      e.preventDefault();\n      onContextClick(item);\n    },\n    [item, onContextClick],\n  );\n\n  return (\n    <Container onClick={handleOnClick} onContextMenu={handleOnContextClick}>\n      <img src={`/images/${getIcon(item, gameState)}.png`} alt=\"\" />\n    </Container>\n  );\n};\n\nexport default Cell;\n","import config from 'config';\nimport React, { FunctionComponent } from 'react';\nimport { GameState } from 'types';\nimport { styled } from 'utils';\n\ninterface Props {\n  counter: number;\n  stress: boolean;\n  gameState: GameState;\n}\n\nconst Container = styled.div`\n  width: ${config.size * config.cols}px;\n  height: ${config.size * 2}px;\n  background-color: white;\n  display: flex;\n`;\n\nconst getMainImage = (gameState: GameState) => {\n  switch (gameState) {\n    case 'lost':\n    case 'lost-quarantine':\n      return 'fail';\n    case 'won':\n      return 'success';\n    default:\n      return 'inprogress';\n  }\n};\n\nconst Header: FunctionComponent<Props> = ({ gameState, stress }) => {\n  const stressed = stress || gameState === 'lost' || gameState === 'lost-quarantine';\n\n  return (\n    <Container>\n      <img src={`/images/nurse-${stressed ? 'stress' : 'normal'}.png`} alt=\"\" />\n      <img src={`/images/${getMainImage(gameState)}.png`} alt=\"\" />\n    </Container>\n  );\n};\n\nexport default Header;\n","import React, { useCallback, useState } from 'react';\nimport { styled } from 'utils';\n\nconst images = ['splash.png', 'rules.png'];\n\nconst Container = styled.div`\n  background-color: #181425;\n  position: absolute;\n  cursor: pointer;\n  top: 0;\n  left: 0;\n  z-index: 2;\n\n  &:hover img {\n    opacity: 0.75;\n  }\n`;\n\nconst Splash = () => {\n  const [step, setStep] = useState(0);\n  const handleClick = useCallback(() => {\n    setStep(step + 1);\n  }, [step]);\n  return images[step] ? (\n    <Container>\n      <img src={`/images/${images[step]}`} onClick={handleClick} alt=\"\" />\n    </Container>\n  ) : null;\n};\n\nexport default Splash;\n","import React from 'react';\nimport { styled } from 'utils';\n\nconst Container = styled.div`\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  font-family: sans-serif;\n  background-color: #8b9bb4;\n  padding: 5px 10px;\n  opacity: 0.3;\n\n  &:hover {\n    opacity: 1;\n  }\n\n  a {\n    color: #ffffff;\n  }\n`;\n\nconst Footer = () => (\n  <Container>\n    <a href=\"https://twitter.com/hszanowski\">@hszanowski</a>\n    <a href=\"https://twitter.com/wesgabes\">@wesgabes</a>\n    <a href=\"https://github.com/hsz/corona-attacks\">github</a>\n    <a href=\"/\">restart</a>\n  </Container>\n);\n\nexport default Footer;\n","import { Board } from 'components';\nimport config from 'config';\nimport { range, shuffle } from 'lodash';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport 'ress';\nimport { GameState, Item } from 'types';\nimport { styled } from 'utils';\n\nconst Container = styled.div`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst items: Item[] = ((max = config.rows * config.cols) => {\n  const [virusA, virusB, cure] = shuffle(range(max));\n  return range(max).map(i => ({\n    position: i,\n    isVirus: i === virusA || i === virusB,\n    isCure: i === cure,\n    hint: 0,\n  }));\n})();\n\nconst getNeighbours = (item: Item | undefined): Item[] => {\n  if (!item) {\n    return [];\n  }\n  const { cols, rows } = config;\n  const { position } = item;\n\n  const positions = [\n    position - 1,\n    position + 1,\n    position - 1 - cols,\n    position - cols,\n    position - cols + 1,\n    position + cols - 1,\n    position + cols,\n    position + cols + 1,\n  ];\n  return positions\n    .filter(\n      v =>\n        !(\n          v < 0 ||\n          v >= cols * rows ||\n          (position % cols === 0 && v % cols === cols - 1) ||\n          (position % cols === 9 && v % cols === 0)\n        ),\n    )\n    .map(i => items[i]);\n};\n\nconst revealMap = () =>\n  items.forEach(item => {\n    item.isRevealed = true;\n  });\n\nconst spreadDisease = (counter: number) => {\n  if (counter > config.spreadAfter) {\n    const potentialVirus = shuffle(getNeighbours(shuffle(items).find(it => it.isVirus))).find(\n      it => !it.isRevealed && !it.isCure && !it.isVirus,\n    );\n    if (potentialVirus) {\n      potentialVirus.isVirus = true;\n    }\n  }\n\n  items.forEach(it => {\n    it.hint = getNeighbours(it).reduce((acc, v) => acc + +v.isVirus, 0);\n  });\n};\n\nconst App = () => {\n  const [counter, setCounter] = useState(0);\n  const [gameState, setGameState] = useState<GameState>('ongoing');\n\n  useEffect(() => {\n    if (gameState !== 'ongoing') {\n      revealMap();\n    }\n  }, [gameState]);\n\n  const processClick = useCallback(\n    (item: Item, callback: () => void) => {\n      if (item.isRevealed) {\n        return;\n      }\n\n      callback();\n\n      setCounter(counter + 1);\n      item.isRevealed = true;\n      spreadDisease(counter);\n    },\n    [counter],\n  );\n\n  const handleCellClick = useCallback(\n    (item: Item) => {\n      processClick(item, () => {\n        if (item.isVirus) {\n          setGameState('lost');\n        }\n        if (item.isCure) {\n          setGameState('won');\n        }\n      });\n    },\n    [processClick],\n  );\n\n  const handleCellContextClick = useCallback(\n    (item: Item) => {\n      processClick(item, () => {\n        if (item.isVirus) {\n          item.isUnderQuarantine = true;\n        } else {\n          setGameState('lost-quarantine');\n        }\n      });\n    },\n    [processClick],\n  );\n\n  return (\n    <Container>\n      <Board\n        gameState={gameState}\n        counter={counter}\n        items={items}\n        onCellClick={handleCellClick}\n        onContextClick={handleCellContextClick}\n      />\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Global } from '@emotion/core';\nimport React from 'react';\nimport { hydrate, render } from 'react-dom';\nimport { css } from 'utils';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst globalStyles = css`\n  body,\n  html {\n    height: 100%;\n    background-color: #181425;\n    user-select: none;\n  }\n`;\n\nconst rootElement = document.getElementById('root');\n(rootElement?.hasChildNodes() ? hydrate : render)(\n  <>\n    <Global styles={globalStyles} />\n    <App />\n  </>,\n  rootElement,\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}